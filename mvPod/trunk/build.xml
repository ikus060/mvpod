<?xml version="1.0" encoding="UTF-8"?>

<project default="dist" name="Build script" basedir=".">

	<property name="app.name" value="mvPod" />
	<property name="app.file.name" value="mvpod" />
	<property name="app.description" value="mvPod Application" />
	<property name="main.class" value="net.homeip.entreprisesmd.mvconv.gui.Main" />

	<property name="root.dir" value="." />
	<property name="libs.dir" value="${root.dir}/lib" />
	<property name="target.dir" value="${root.dir}/ant-target" />
	<property name="distsrc.dir" value="${root.dir}/dist-src" />
	<property name="dist.linux.dir" value="${target.dir}/linux" />
	<property name="dist.linux64.dir" value="${target.dir}/linux64" />
	<property name="dist.win32.dir" value="${target.dir}/win32" />
	<property name="dist.macosx.dir" value="${target.dir}/macosx" />
	<property name="bin.dir" value="${root.dir}/bin" />
	<property name="src.dir" value="${root.dir}/src" />
	<property name="launch4j.dir" location="${distsrc.dir}/launch4j" />
	<property name="antcontrib.dir" location="${distsrc.dir}/ant-contrib" />
	<property name="mvn" location="${distsrc.dir}/apache-maven-2.2.1/bin/mvn" />

	<property name="generic.excludes"
	          value="**/*.jar **/*.txt **/*.jardesc **/.classpath **/.project **/aereg.lib **/aereg.dll" />
	<property name="dist.jar.excludes" value="${generic.excludes} **/*.java " />

	<property name="jar.filename" value="${app.file.name}.jar" />
	

	<target name="init" depends="findRevision">
		
		<property name="dist.dir"
		          value="${target.dir}/distribution/${app.file.name}-${version}" />
		<tstamp />
		<mkdir dir="${target.dir}" />
		<mkdir dir="${dist.dir}" />
		<mkdir dir="${bin.dir}" />
	</target>

	<target name="findRevision">

		<taskdef resource="net/sf/antcontrib/antcontrib.properties">
			<classpath>
				<pathelement location="${antcontrib.dir}/ant-contrib-0.6.jar" />
			</classpath>
		</taskdef>

		<property name="revision" value="HEAD" />

		<!-- find out revision number of HEAD, need svn.exe installed on local machine -->
		<exec executable="svn" outputproperty="svnlog.out" failonerror="true">
			<arg line="info --non-interactive" />
		</exec>

		<echo level="info">svn info -r HEAD --non-interactive</echo>
		<echo level="info">${svnlog.out}</echo>

		<propertyregex property="svn.build"
		               input="${svnlog.out}"
		               regexp="Last Changed Rev: ([0-9]*)"
		               select="\1"
		               casesensitive="false" />

		<!-- Update Source version -->
		<replaceregexp file="${src.dir}/version.properties" match="@build@" replace="${svn.build}" byline="true" />
		
		<!-- load version, version.text and version.build from property file -->
		<property file="${src.dir}/version.properties" />
		<fail message="version not define in version.properties"
		      unless="version" />
		<fail message="version.text not define in version.properties"
		      unless="version.text" />
		<fail message="version.build not define in version.properties"
		      unless="version.build" />


		<!-- Display the values -->
		<echo message="Version is ${version}" level="info" />
		<echo message="Version text is ${version.text}" level="info" />
		<echo message="Version build is ${version.build}" level="info" />


		
	</target>


	<target name="compile" depends="init">
		<path id="libs.classpath">
			<fileset dir="${libs.dir}" includes="**/*.jar" />
		</path>


		<copy includeemptydirs="false" todir="${bin.dir}" filtering="true">
			<fileset dir="${src.dir}"
			         excludes="**/*.launch, **/*.testsuite, **/*.deploy, **/*.location, **/*.execution, **/*.datapool, **/*.artifact, **/*.html, **/*.svg, **/*.java" />
		</copy>

		<replaceregexp file="${bin.dir}/version.properties"
		               match="@build@"
		               replace="${version.build}"
		               byline="true" />

		<javac srcdir="${src.dir}"
		       destdir="${bin.dir}"
		       nowarn="yes"
		       source="5"
		       target="5"
		       includeAntRuntime="no"
		       debug="true"
		       debuglevel="lines,vars,source">
			<classpath refid="libs.classpath" />
		</javac>

	</target>

	<!-- Main entry point to produce binaries for all supported platform -->
	<target name="dist" depends="dist-win32,dist-linux64,dist-linux" />

	<target name="dist-src" depends="init">

		<tar destfile="${target.dir}/${app.file.name}-${version}-src.tar">
			<tarfileset dir="${distsrc.dir}"
			            prefix="dist-src"
			            preserveLeadingSlashes="true" />
			<tarfileset dir="${libs.dir}"
			            prefix="/lib"
			            preserveLeadingSlashes="true" />
			<tarfileset dir="${src.dir}"
			            prefix="/src"
			            preserveLeadingSlashes="true" />
			<tarfileset file="${root.dir}/build.xml"
			            prefix="/"
			            preserveLeadingSlashes="true" />
		</tar>

		<gzip zipfile="${dist.dir}/${app.file.name}-${version}-src.tar.gz"
		      src="${target.dir}/${app.file.name}-${version}-src.tar" />
		<delete file="${target.dir}/${app.file.name}-${version}-src.tar" />

	</target>

	<target name="dist-linux" depends="jar">

		<!-- Copy jar files -->
		<copy file="${target.dir}/${jar.filename}"
		      tofile="${dist.linux.dir}/lib/${jar.filename}" />
		<copy todir="${dist.linux.dir}/lib/">
			<fileset dir="${libs.dir}">
				<include name="org.eclipse.core.commands*.jar" />
				<include name="org.eclipse.equinox.common*.jar" />
				<include name="org.eclipse.jface*.jar" />
				<exclude name="*source*.jar" />
			</fileset>
		</copy>
		<copy file="${libs.dir}/org.eclipse.swt.gtk.linux.x86_3.5.2.v3557f.jar"
		      tofile="${dist.linux.dir}/lib/swt.jar" />

		<!-- Copy text files -->
		<copy file="${distsrc.dir}/LICENSE"
		      tofile="${dist.linux.dir}/LICENSE" />
		<copy file="${distsrc.dir}/NEWS" tofile="${dist.linux.dir}/NEWS" />
		<copy file="${distsrc.dir}/README" tofile="${dist.linux.dir}/README" />

		<copy file="${distsrc.dir}/app-icon.png"
		      tofile="${dist.linux.dir}/bin/${app.file.name}.png" />
		<copy file="${distsrc.dir}/app"
		      tofile="${dist.linux.dir}/bin/${app.file.name}" />
		<chmod file="${dist.linux.dir}/bin/${app.file.name}" perm="775" />

		<!-- Update .properties file with a good classpath -->
		<property name="dist.linux.dir.absolute" location="${dist.linux.dir}" />
		<pathconvert property="dist.linux.classpath" pathsep="\:">
			<fileset dir="${dist.linux.dir}/lib" includes="*.jar" />
			<map from="${dist.linux.dir.absolute}/" to="" />
		</pathconvert>
		<copy file="${distsrc.dir}/app.properties"
		      tofile="${dist.linux.dir}/bin/${app.file.name}.properties">
			<filterchain>
				<replacetokens begintoken="@" endtoken="@">
					<token key="CLASSPATH" value="${dist.linux.classpath}" />
					<token key="BOOT_CLASSPATH" value="lib/${jar.filename}" />
					<token key="MAIN_CLASS" value="${main.class}" />
					<token key="APP_NAME" value="${app.name}" />
				</replacetokens>
			</filterchain>
		</copy>

		<!-- TarGz everything with permission -->
		<tar destfile="${target.dir}/${app.file.name}-${version}.tar">
			<tarfileset dir="${dist.linux.dir}"
			            mode="711"
			            username="root"
			            group="user">
				<include name="**" />
				<exclude name="bin/${app.file.name}" />
			</tarfileset>
			<tarfileset dir="${dist.linux.dir}"
			            mode="755"
			            username="root"
			            group="user">
				<include name="bin/${app.file.name}" />
			</tarfileset>
		</tar>

		<tar tarfile="${target.dir}/${app.file.name}-${version}.tar"
		     basedir="${dist.linux.dir}" />
		<gzip zipfile="${dist.dir}/${app.file.name}-${version}.tar.gz"
		      src="${target.dir}/${app.file.name}-${version}.tar" />
		<delete file="${target.dir}/${app.file.name}-${version}.tar" />

	</target>

	<target name="dist-linux64" depends="jar">

		<copy file="${target.dir}/${jar.filename}"
		      tofile="${dist.linux64.dir}/lib/${jar.filename}" />
		<copy todir="${dist.linux64.dir}/lib/">
			<fileset dir="${libs.dir}">
				<include name="org.eclipse.core.commands*.jar" />
				<include name="org.eclipse.equinox.common*.jar" />
				<include name="org.eclipse.jface*.jar" />
				<exclude name="*source*.jar" />
			</fileset>
		</copy>
		<copy file="${libs.dir}/org.eclipse.swt.gtk.linux.x86_64_3.5.2.v3557f.jar"
		      tofile="${dist.linux64.dir}/lib/swt.jar" />

		<copy file="${distsrc.dir}/LICENSE"
		      tofile="${dist.linux64.dir}/LICENSE" />
		<copy file="${distsrc.dir}/NEWS" tofile="${dist.linux64.dir}/NEWS" />
		<copy file="${distsrc.dir}/README"
		      tofile="${dist.linux64.dir}/README" />

		<copy file="${distsrc.dir}/app-icon.png"
		      tofile="${dist.linux64.dir}/bin/${app.file.name}.png" />
		<copy file="${distsrc.dir}/app"
		      tofile="${dist.linux64.dir}/bin/${app.file.name}" />
		<chmod file="${dist.linux64.dir}/bin/${app.file.name}" perm="775" />


		<!-- Update .properties file with a good classpath -->
		<property name="dist.linux64.dir.absolute"
		          location="${dist.linux64.dir}" />
		<pathconvert property="dist.linux64.classpath" pathsep="\:">
			<fileset dir="${dist.linux64.dir}/lib" includes="*.jar" />
			<map from="${dist.linux64.dir.absolute}/" to="" />
		</pathconvert>
		<copy file="${distsrc.dir}/app.properties"
		      tofile="${dist.linux64.dir}/bin/${app.file.name}.properties">
			<filterchain>
				<replacetokens>
					<token key="CLASSPATH" value="${dist.linux64.classpath}" />
					<token key="BOOT_CLASSPATH" value="lib/${jar.filename}" />
					<token key="MAIN_CLASS" value="${main.class}" />
					<token key="APP_NAME" value="${app.name}" />
				</replacetokens>
			</filterchain>
		</copy>

		<!-- TarGz everything with permission -->
		<tar destfile="${target.dir}/${app.file.name}-${version}-x86_64.tar">
			<tarfileset dir="${dist.linux64.dir}"
			            mode="711"
			            username="root"
			            group="user">
				<include name="**" />
				<exclude name="bin/${app.file.name}" />
			</tarfileset>
			<tarfileset dir="${dist.linux64.dir}"
			            mode="755"
			            username="root"
			            group="user">
				<include name="bin/${app.file.name}" />
			</tarfileset>
		</tar>

		<tar tarfile="${target.dir}/${app.file.name}-${version}-x86_64.tar"
		     basedir="${dist.linux64.dir}" />
		<gzip zipfile="${dist.dir}/${app.file.name}-${version}-x86_64.tar.gz"
		      src="${target.dir}/${app.file.name}-${version}-x86_64.tar" />
		<delete file="${target.dir}/${app.file.name}-${version}-x86_64.tar" />

	</target>

	<!-- Main entry point to produce binaries for Windows 32 bits -->
	<target name="dist-win32" depends="jar">

		<copy file="${target.dir}/${jar.filename}"
		      tofile="${dist.win32.dir}/lib/${jar.filename}" />
		<copy todir="${dist.win32.dir}/lib/">
			<fileset dir="${libs.dir}">
				<include name="org.eclipse.core.commands*.jar" />
				<include name="org.eclipse.equinox.common*.jar" />
				<include name="org.eclipse.jface*.jar" />
				<exclude name="*source*.jar" />
			</fileset>
		</copy>
		<copy file="${libs.dir}/org.eclipse.swt.win32.win32.x86_3.5.2.v3557f.jar"
		      tofile="${dist.win32.dir}/lib/swt.jar" />

		<copy file="${distsrc.dir}/LICENSE"
		      tofile="${dist.win32.dir}/LICENSE.txt" />
		<copy file="${distsrc.dir}/NEWS" tofile="${dist.win32.dir}/NEWS.txt" />
		<copy file="${distsrc.dir}/README"
		      tofile="${dist.win32.dir}/README.txt" />
		<copy file="${distsrc.dir}/app-icon.ico"
		      tofile="${dist.win32.dir}/bin/app-icon.ico" />
		
		<copy file="${distsrc.dir}/mplayer.exe" tofile="${dist.win32.dir}/mplayer.exe" />
		<copy file="${distsrc.dir}/mencoder.exe" tofile="${dist.win32.dir}/mencoder.exe" />
		<copy file="${distsrc.dir}/MP4Box.exe" tofile="${dist.win32.dir}/MP4Box.exe" />


		<!-- Update launch4j configuration file by replacing properties-->
		<property name="dist.win32.dir.absolute" location="${dist.win32.dir}" />
		<pathconvert property="dist.win32.classpath"
		             pathsep="&lt;/cp&gt;&lt;cp&gt;">
			<fileset dir="${dist.win32.dir}/lib" includes="*.jar" />
			<map from="${dist.win32.dir.absolute}/" to="./" />
		</pathconvert>
		<copy file="${distsrc.dir}/app-l4j.xml"
		      tofile="${dist.win32.dir}/app-l4j.xml">
			<filterchain>
				<expandproperties />
			</filterchain>
		</copy>

		<!-- Create a '.exe' wrapper over the '.jar' using launch4j -->
		<taskdef name="launch4j"
		         classname="net.sf.launch4j.ant.Launch4jTask"
		         classpath="${launch4j.dir}/launch4j.jar:${launch4j.dir}/lib/xstream.jar" />
		<chmod perm="777" dir="${launch4j.dir}/bin" includes="*" />
		<launch4j configFile="${dist.win32.dir}/app-l4j.xml" />
		<delete file="${dist.win32.dir}/app-l4j.xml" />

		<!-- Create an installer with NSIS -->
		<copy file="${distsrc.dir}/installer.nsi"
		      tofile="${target.dir}/installer.nsi">
			<filterchain>
				<replacetokens>
					<token key="app.name" value="${app.name}" />
					<token key="app.file.name" value="${app.file.name}" />
				</replacetokens>
			</filterchain>
		</copy>
		<copy file="${distsrc.dir}/LICENSE"
		      tofile="${target.dir}/LICENSE.txt" />

		<echo>Create Windows installer...</echo>
		<exec executable="makensis" outputproperty="nsislog.out">
			<arg line="${target.dir}/installer.nsi" />
		</exec>
		<echo>${nsislog.out}</echo>


		<delete file="${target.dir}/installer.nsi" />
		<delete file="${target.dir}/jre.ini" />
		<delete file="${target.dir}/jre-1_5_0_15-windows-i586-p.exe" />
		<delete file="${target.dir}/LICENSE.txt" />


		<move file="${target.dir}/setup.exe"
		      tofile="${dist.dir}/${app.file.name}-${version}-install.exe" />

	</target>

	<target name="jar" depends="compile">

		<jar destfile="${target.dir}/${jar.filename}"
		     basedir="${bin.dir}"
		     excludes="${dist.jar.excludes}">
		</jar>

	</target>

	<target name="clean" description="Use to clean the project">
		<delete dir="${target.dir}" />
		<delete dir="${bin.dir}" />
	</target>

	<target name="sonar" depends="compile">

		<copy file="${distsrc.dir}/pom.xml" tofile="pom.xml">
			<filterchain>
				<expandproperties />
			</filterchain>
		</copy>

		<exec command="mvn">
			<arg value="sonar:sonar" />
		</exec>

	</target>

</project>
